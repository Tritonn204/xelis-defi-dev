struct CAsset{
    asset_id: u64,
    owner: optional<Address>,
    mintable: bool,
    max_supply: u64
}

entry deploy_asset(name: string, ticker: string, supply: u64, decimals: u8, mintable: bool, max_supply: u64) {
    let storage: Storage = storage();
    let fee: u64 = storage.load("fee").unwrap();
    let deposit: u64 = get_deposit_for_asset(from_hex("0000000000000000000000000000000000000000000000000000000000000000")).unwrap();
    if deposit < fee { return 5; }
    let assetManager: AssetManager = asset_manager();
    let asset: optional<Asset> = null;
    let asset_id: u64 = random().next_u64();
    let owner: Address = transaction().source();
    if mintable {
    	asset = assetManager.create(asset_id, name, ticker, decimals, null);
    } else {
    	asset = assetManager.create(asset_id, name, ticker, decimals, supply);
    }
    if asset.is_none() { return 1; } // asset not created
    let asset: Asset = asset.unwrap();
    if mintable {
        asset.mint(supply);
    }
    transfer(owner, supply, asset.get_hash());
    let casset: CAsset = CAsset { asset_id: asset_id, owner: owner, mintable: mintable, max_supply: max_supply};
    storage.store(asset.get_hash(), casset);
    return 0;
}

entry mint(asset_hash: Hash, amount: u64) {
    let storage: Storage = storage();
    let casset: CAsset = storage.load(asset_hash).unwrap();
    let source: Address = transaction().source();
    if (source != casset.owner.unwrap()) { return 2; } // not asset owner
    if !casset.mintable { return 3; } // asset not mintable
	let asset: Asset = asset_manager().get_by_id(casset.asset_id).unwrap();
    if ((asset.get_supply() + amount) > casset.max_supply) { return 4; } // Mint would be over max supply
    asset.mint(amount);
    transfer(source, amount, asset.get_hash());
    return 0;
}

entry transfer_ownership(asset_hash: Hash, new_owner: Address) {
    let storage: Storage = storage();
    let casset: CAsset = storage.load(asset_hash).unwrap();
    if transaction().source() != casset.owner.unwrap() { return 2; }
    casset.owner = new_owner;
    storage.store(asset_hash, casset);
    return 0;
}

entry renounce_ownership(asset_hash: Hash, new_owner: Address) {
    let storage: Storage = storage();
    let casset: CAsset = storage.load(asset_hash).unwrap();
    if transaction().source() != casset.owner.unwrap() { return 2; }
    casset.owner = null;
    storage.store(asset_hash, casset);
    return 0;
}

entry set_fee(new_fee: u64) {
    let owner: Address = storage().load("owner").unwrap();
    if transaction().source() != owner { return 100; }
    storage.store("fee", new_fee);
}

entry constructor() {
	let storage: Storage = storage();
	if storage.load("owner").is_some() { return 100;}
	storage.store("owner", transaction().source());
	storage.store("fee", 1 * 10 ^ 8);
}