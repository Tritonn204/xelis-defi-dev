struct CAsset{
    asset_id: u64,
    owner: optional<Address>,
    mintable: bool,
    max_supply: u64
}

fn charge(cost: u64, asset: Hash) {
    let deposit: u64 = get_deposit_for_asset(asset).unwrap();
    require(cost <= deposit, "DepositTooLow");
    if deposit > cost {
        let change: u64 = deposit - cost;
        transfer(Transaction::current().source(), change, asset);
    }
    transfer(Storage::new().load("owner").unwrap(), cost, asset);
}

fn new_asset_id() -> u64 {
    let storage: Storage = Storage::new();
    let asset_id: u64 = storage.load("last_asset_id").unwrap();
    asset_id = asset_id + 1;
    storage.store("last_asset_id", asset_id);
    return asset_id;
}

entry deploy_asset(name: string, ticker: string, supply: u64, decimals: u8, mintable: bool, _max_supply: u64) {
    let storage: Storage = Storage::new();
    let fee: u64 = storage.load("fee").unwrap();
    let xelis: Hash = Hash::zero();
    charge(fee, xelis);
    let asset: optional<Asset> = null;
    let asset_id: u64 = new_asset_id();
    let owner: Address = Transaction::current().source();
    let max_supply: u64 = 0;
    if mintable {
        asset = Asset::create(asset_id, name, ticker, decimals, null);
        max_supply = (_max_supply == 0) ? 18446744073709551614 : _max_supply; // Jank fix thanks to JS Number size
    } else {
        asset = Asset::create(asset_id, name, ticker, decimals, supply);
        max_supply = supply;
    }
    require(asset.is_some(), "AssetNotCreated");
    let asset: Asset = asset.unwrap();
    if mintable {
        asset.mint(supply);
    }
    transfer(owner, supply, asset.get_hash());
    let casset: CAsset = CAsset { asset_id: asset_id, owner: owner, mintable: mintable, max_supply: max_supply};
    storage.store(asset.get_hash(), casset);
    return 0;
}

entry mint(asset_hash: Hash, amount: u64) {
    let storage: Storage = Storage::new();
    let casset: CAsset = storage.load(asset_hash).unwrap();
    let source: Address = Transaction::current().source();
    require(source == casset.owner.unwrap(), "NotAssetOwner");
    require(casset.mintable, "AssetNotMintable");
    let asset: Asset = Asset::get_by_id(casset.asset_id).unwrap();
    require((asset.get_supply() + amount) <= casset.max_supply, "MintOverMax"); 
    asset.mint(amount);
    transfer(source, amount, asset.get_hash());
    return 0;
}

entry transfer_ownership(asset_hash: Hash, new_owner: Address) {
    let storage: Storage = Storage::new();
    let casset: CAsset = storage.load(asset_hash).unwrap();
    require(Transaction::current().source() == casset.owner.unwrap(), "NotAssetOwner");
    casset.owner = new_owner;
    storage.store(asset_hash, casset);
    return 0;
}

entry renounce_ownership(asset_hash: Hash) {
    let storage: Storage = Storage::new();
    let casset: CAsset = storage.load(asset_hash).unwrap();
    require(Transaction::current().source() == casset.owner.unwrap(), "NotAssetOwner");
    casset.owner = null;
    storage.store(asset_hash, casset);
    return 0;
}

entry set_fee(new_fee: u64) {
    let storage: Storage = Storage::new();
    let owner: Address = Storage::new().load("owner").unwrap();
    require(Transaction::current().source() == owner, "NotContractOwner");
    storage.store("fee", new_fee);
    return 0;
}

hook constructor() -> u64 {
    let storage: Storage = Storage::new();
    storage.store("last_asset_id", 0);
    storage.store("owner", Transaction::current().source());
    storage.store("fee", 1 * 10 ** 8);
    return 0;
}